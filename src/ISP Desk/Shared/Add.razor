@using System.Text.RegularExpressions
<style>
    .add-popup {
        position: fixed;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        height: max-content;
        width: 750px;
        background-color: white;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
        box-sizing: border-box;
        z-index: 100
    }

    .add-head-row {
        width: 100%;
        display: flex;
        justify-content: center;
        background-color: lightgray;
        column-gap: 10px;
        align-items: center;
        box-sizing: border-box;
        padding: 20px
    }

        .add-head-row img {
            width: 32px;
            height: 32px
        }

        .add-head-row p {
            margin: 0;
            font-size: 20px;
            font-weight: 600
        }

    .add-field {
        padding: 15px;
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        background-color: white;
        justify-content: flex-start;
        align-items: center;
        row-gap: 40px;
        box-sizing: border-box;
        column-gap: 30px
    }

        .add-field input {
            width: calc(50% - 15px);
            font-size: 22px;
            font-weight: 600;
            padding: 10px;
            box-sizing: border-box
        }

            .add-field input:focus {
                border-color: blue;
                outline: none;
            }

    .radio-cnt {
        display: flex;
        width: calc(50% - 15px);
        column-gap: 20px;
        box-sizing: border-box;
        padding: 10px
    }

        .radio-cnt div {
            display: flex;
            align-items: center;
            column-gap: 10px
        }
        
        .radio-cnt input {
            cursor: pointer;
            transform: scale(1.5);
            margin: 0
        }

        .radio-cnt label {
            font-size: 22px;
            font-weight: 600
        }

    .add-cnt {
        display: flex;
        width: 100%;
        background-color: lightgray;
        padding: 10px 0;
        align-items: center;
        justify-content: flex-end;
    }

        .add-cnt .button-left, .add-cnt .button-right {
            margin: 0 20px 0 0;
            padding: 10px;
            font-weight: 600;
            color: white;
            transition: 0.2s;
            cursor: pointer
        }

        .add-cnt .button-left {
            background-color: red;
            border: 1px solid red;
        }

            .add-cnt .button-left:hover {
                background-color: firebrick;
                border: 1px solid firebrick
            }

        .add-cnt .button-right {
            background-color: slategray;
            border: 1px solid slategray
        }

            .add-cnt .button-right:hover {
                background-color: dimgray;
                border: 1px solid dimgray
            }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        height: 32px;
        width: 32px;
        cursor: pointer
    }

    @@media (max-width: 768px) {
        .add-popup {
            width: 80%
        }

        .add-field {
            flex-direction: column;
        }

            .add-field input, .radio-cnt {
                width: calc(100% - 22px);
            }

        .add-head-row {
            column-gap: 7px;
            padding: 15px
        }

            .add-head-row img {
                width: 24px;
                height: 24px
            }

            .add-head-row p {
                font-size: 15px
            }

        .add-field {
            padding: 10px;
            row-gap: 20px
        }

            .add-field input {
                font-size: 15px;
                padding: 7px
            }

        .radio-cnt {
            column-gap: 15px;
            padding: 7px
        }

            .radio-cnt div {
                column-gap: 7px
            }

            .radio-cnt label {
                font-size: 14px
            }

        .add-cnt {
            padding: 7px 0
        }

            .add-cnt .button-left, .add-cnt .button-right {
                margin: 0 15px 0 0;
                padding: 7px
            }
    }
</style>

<div class="add-popup" style="display:@(isVisible ? "flex": "none")">
    <div class="add-head-row">
        <img src=@(isAddingOrEditing ? "images/add.png" : "images/edit.png") />
        <p>@(isAddingOrEditing ? "Новый сотрудник" : "Изменить данные")</p>
    </div>
    <div class="add-field">
        <input placeholder="Фамилия" @bind="lName" />
        <input placeholder="Имя" @bind="fName" />
        @if (isAddingOrEditing)
        {
            <div class="radio-cnt">
                <div>
                    <input type="radio" id="M" name="gender" @bind="gender" checked />
                    <label for="M">Муж</label>
                </div>
                <div>
                    <input type="radio" id="Ж" name="gender" @bind="gender" />
                    <label for="Ж">Жен</label>
                </div>
            </div>
        }
        <input placeholder="Отчество" @bind="mName" />
        <input placeholder="Номер телефона" @bind="phone" />
        <input placeholder="Электронная почта" @bind="email" />
    </div>
    <div class="add-cnt">
        <button class="button-left" disabled="@isOkVisible" @onclick="CheckAndConfirm">@(isAddingOrEditing ? "Добавить" : "Изменить")</button>
        <button class="button-right" disabled="@isOkVisible" @onclick="Close">Отмена</button>
    </div>
    <img class="close" src="images/close.png" @onclick="() => {if(!isOkVisible) Close(); }" />
</div>

<Ok isVisible="isOkVisible" isVisibleChanged="OkVisibility" isSucceded=false message="@result" />

@code {
    [Parameter] public bool isVisible { get; set; }
    [Parameter] public EventCallback isVisibleChanged { get; set; }
    [Parameter] public EventCallback<Installator> AddInst { get; set; }
    [Parameter] public EventCallback<Installator> EditInst { get; set; }
    [Parameter] public Installator i { get; set; }
    [Parameter] public bool isAddingOrEditing { get; set; }
    private bool isOkVisible = false;
    private string result = string.Empty;

    private string lName = string.Empty, mName = string.Empty, fName = string.Empty, gender = "М",
        phone = string.Empty, email = string.Empty;

    protected override void OnParametersSet()
    {
        if (isAddingOrEditing)
        {
            lName = string.Empty;
            mName = string.Empty;
            fName = string.Empty;
            phone = string.Empty;
            email = string.Empty;
        }
        else
        {
            lName = i.LastName;
            mName = i.MiddleName;
            fName = i.FirstName;
            phone = i.PhoneNumber;
            email = i.Email;
        }
    }

    private async Task CheckAndConfirm()
    {
        if (string.IsNullOrEmpty(fName) || string.IsNullOrEmpty(mName) || string.IsNullOrEmpty(lName) || string.IsNullOrEmpty(email) || string.IsNullOrEmpty(phone))
        {
            result = "Заполните все поля!";
            isOkVisible = true;
            return;
        }
        else if (!FormatChecker.validateMail(email))
        {
            result = "Неверный формат электронной почты!";
            isOkVisible = true;
            return;
        }
        else if (!FormatChecker.validatePhone(phone))
        {
            result = "Неверный формат телефона!";
            isOkVisible = true;
            return;
        }
        await Confirm();
    }

    private async Task Confirm()
    {
        
        Installator inst = new Installator()
            {
                LeadID = UserContext.Lead.LeadID,
                FirstName = fName,
                MiddleName = mName,
                LastName = lName,
                Gender = gender,
                PhoneNumber = Regex.Replace(phone, @"^8(\d{10})$", "+7$1"),
                Email = email
            };
        if (isAddingOrEditing)
        {
            await AddInst.InvokeAsync(inst);
        }
        else
        {
            inst.InstallatorID = i.InstallatorID;
            inst.Gender = i.Gender;
            await EditInst.InvokeAsync(inst);
        }
        Close();
    }

    private void OkVisibility() => isOkVisible = false;
    private void Close() => isVisibleChanged.InvokeAsync();
}
