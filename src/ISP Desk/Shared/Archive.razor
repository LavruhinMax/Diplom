<style>
    .archive-popup {
    position: fixed;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    top: 25%;
    bottom: 25%;
    left: 15%;
    right: 15%;
    background-color: white;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
    border-radius: 10px;
    overflow-y: auto;
    z-index: 100
    }

    .archive-popup p {
    font-size: 28px;
    font-weight: 600
    }

    .empty {
    display: flex;
    flex: 1;
    flex-direction: column;
    row-gap: 30px;
    align-items: center;
    justify-content: center
    }

    .empty img {
    width: 300px
    }

    .empty p {
    margin: 0;
    font-size: 28px;
    font-style: italic
    }

    .archive-title {
    font-size: 32px;
    font-weight: 600;
    margin: 30px 0
    }

    .archive-row p, .head-row p {
    width: 22.5%;
    padding: 20px 0 20px 15px;
    font-size: 18px;
    font-weight: 600;
    margin: 0;
    box-sizing: border-box;
    }

    .head-row {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 90%;
    min-height: max-content;
    background-color: dimgray
    }

    .head-row p {
    font-size: 16px;
    color: white
    }

    .archive-row {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 90%;
    min-height: max-content;
    border: 1px solid lightgray
    }

    .archive-row p {
    padding: 25px 0 25px 15px
    }

    .archive-row div {
    flex: 1;
    display: flex;
    justify-content: center;
    column-gap: 30px
    }

    .archive-row img {
    height: 30px;
    width: 30px;
    cursor: pointer
    }

    .archive-close {
    position: absolute;
    top: 20px;
    right: 20px;
    height: 60px;
    width: 60px;
    cursor: pointer
    }

    @@media (max-width: 1920px) {
    .archive-title {
    font-size: 28px;
    margin: 25px 0
    }

    .archive-popup {
    top: 25%;
    bottom: 25%;
    left: 10%;
    right: 10%;
    }

    .empty img {
        width: 200px
    }

    .empty p {
        font-size: 24px
    }

    .archive-row p {
    font-size: 14px
    }
    }

    @@media (max-width: 1280px) {
    .empty img {
    width: 225px
    }

    .empty p {
    font-size: 20px
    }

    .archive-title {
    font-size: 24px;
    margin: 25px 0
    }

    .archive-popup {
    top: 25%;
    bottom: 25%;
    left: 10%;
    right: 10%;
    }

    .head-row {
    display: none;
    }

    .archive-row {
    min-height: max-content;
    padding: 10px 0;
    flex-direction: column;
    align-items: flex-start;
    row-gap: 20px;
    margin: 0 0 20px 0
    }

    .archive-row p {
    padding: 0 0 0 15px;
    width: 100%;
    font-size: 18px
    }

    .archive-row div {
    padding: 0 0 0 15px
    }
    }

    @@media (max-width: 768px) {
    .empty img {
    width: 150px
    }

    .empty p {
    font-size: 16px
    }

    .archive-title {
    font-size: 20px;
    margin: 25px 0
    }

    .archive-popup {
    top: 25%;
    bottom: 25%;
    left: 5%;
    right: 5%
    }

    .head-row {
    display: none;
    }

    .archive-row {
    min-height: max-content;
    padding: 10px 0;
    flex-direction: column;
    align-items: flex-start;
    row-gap: 20px;
    margin: 0 0 20px 0
    }

    .archive-row p {
    padding: 0 0 0 15px;
    width: 100%;
    font-size: 14px
    }

    .archive-row div {
    padding: 0 0 0 15px
    }

    .archive-close {
    height: 30px;
    width: 30px;
    }
    }
</style>

<div style="display: @(isVisible ? "flex" : "none")" class="archive-popup">
    <p class="archive-title">Архив</p>
    @if (installators == null || installators.Count == 0)
    {
        <div class="empty">
            <img src="images/empty-archive.png" />
            <p>Архив пуст</p>
        </div>
    }
    else
    {
        <div class="head-row">
            <p>ФИО</p>
            <p>Email</p>
            <p>Контактный телефон</p>
            <p>Дата удаления</p>
            <p style="width: 10%; flex: none"></p>
        </div>
        @foreach (var i in installators)
        {
            <div class="archive-row">
                <p>@i.LastName @i.FirstName @i.MiddleName</p>
                <p>@i.Email</p>
                <p>@i.PhoneNumber</p>
                <p>Удален(а): @i.RemovalDate</p>
                <div>
                    <img src="images/recover.png" @onclick="() => OpenRec(i)" />
                    <img src="images/delete.webp" @onclick="() => OpenDel(i)" />
                </div>
            </div>
        }
    }
    <img class="archive-close" @onclick="Close" src="images/close.png" />
</div>

<Confirm isVisible="isRecoverVisible" isVisibleChanged="RecoverVisibility" isConfirmed="Recover" message="@message" />
<Delete isVisible="isDeleteVisible" isVisibleChanged="DeleteVisibility" isConfirmed="Delete" inst="selectedInstallator" />

@code {
    [Parameter] public bool isVisible { get; set; }
    [Parameter] public EventCallback isVisibleChanged { get; set; }
    [Parameter] public EventCallback<Installator> recoverInst { get; set; }
    [Parameter] public EventCallback<Installator> deleteInst { get; set; }
    [Parameter] public List<Installator> installators { get; set; }
    private Installator selectedInstallator;
    private string message = string.Empty;
    private bool isRecoverVisible = false;
    private bool isDeleteVisible = false;

    public void Close() => isVisibleChanged.InvokeAsync();

    public void OpenRec(Installator i)
    {
        selectedInstallator = i;
        message = $"{selectedInstallator.LastName} {selectedInstallator.FirstName[0]}.{selectedInstallator.MiddleName[0]}. будет восстановлен";
        if (selectedInstallator.Gender == "Ж") message += "а";
        message += ". Продолжить?";
        isRecoverVisible = true;
    }

    public void OpenDel(Installator i)
    {
        selectedInstallator = i;
        isDeleteVisible = true;
    }

    private async Task Recover(bool isConfirmed)
    {
        if (isConfirmed)
        {
            installators.Remove(selectedInstallator);
            await recoverInst.InvokeAsync(selectedInstallator);
        }
    }

    private async Task Delete(bool isConfirmed)
    {
        if (isConfirmed)
        {
            installators.Remove(selectedInstallator);
            await deleteInst.InvokeAsync(selectedInstallator);
        }
    }

    private void RecoverVisibility() => isRecoverVisible = false;
    private void DeleteVisibility() => isDeleteVisible = false;
}