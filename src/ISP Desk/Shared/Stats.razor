<style>
    .stats-popup {
        position: fixed;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        height: max-content;
        width: 1000px;
        background-color: white;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
        box-sizing: border-box;
        z-index: 100
    }

    .stats-head-row {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        background-color: #333333
    }

        .stats-head-row p {
            width: 100%;
            text-align: center;
            color: white;
            font-size: 24px;
            font-weight: 600;
            margin: 15px 0
        }

    .stats-button-row {
        width: 100%;
        display: flex
    }

        .stats-button-row button, .stats-button-row .selected {
            flex: 1;
            font-size: 20px;
            font-weight: 600;
            padding: 20px 0;
            background-color: whitesmoke;
            transition: 0.1s;
            border: none;
            cursor: pointer
        }

            .stats-button-row button:hover {
                background-color: gray
            }

        .stats-button-row .selected {
            background-color: #CD5700;
            color: white
        }

            .stats-button-row .selected:hover {
                background-color: darkorange
            }

    .stats-title-row {
        width: 100%;
        padding: 20px;
        box-sizing: border-box;
        background-color: gainsboro
    }

        .stats-title-row p {
            margin: 0;
            font-size: 18px;
            font-weight: 600
        }

    .stats-diag-row {
        width: 100%;
        display: flex;
        align-items: center;
        padding: 10px 20px;
        box-sizing: border-box;
        justify-content: space-between
    }

    .stats-column {
        display: flex;
        flex-direction: column;
    }

    .stats-cnt {
        display: flex;
        align-items: center;
        column-gap: 20px
    }

        .stats-cnt div {
            width: 20px;
            height: 20px
        }

        .stats-cnt p {
            font-size: 18px;
            margin: 10px 0
        }

    .stats-diag {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 175px;
        width: 350px;
    }

    .stats-ok {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: gainsboro
    }

        .stats-ok img {
            height: 40px;
            margin: 0 0 0 20px;
            cursor: pointer
        }

        .stats-ok button {
            background-color: red;
            padding: 10px 30px;
            margin: 10px 30px 10px 0;
            border: 1px solid red;
            border-radius: 5px;
            color: white;
            cursor: pointer
        }

            .stats-ok button:hover {
                background-color: firebrick;
                border: 1px solid firebrick
            }

    .stats-close {
        position: absolute;
        right: 10px;
        height: 24px;
        width: 24px;
        cursor: pointer
    }

    .stats-dropdown {
        display: none
    }

    @@media(max-width: 1920px) {
        .stats-popup {
            width: 700px
        }

        .stats-cnt p {
            font-size: 14px;
            margin: 7px 0
        }

        .stats-diag {
            height: 125px;
            width: 250px;
        }
    }

    @@media(max-width: 768px) {
        .stats-popup {
            width: 90%
        }

        .stats-button-row {
            display: none;
        }

        .stats-dropdown {
            width: 100%;
            display: flex;
        }

            .stats-dropdown select {
                width: 100%;
                text-align: center;
                padding: 7px 0;
                font-size: 18px;
                font-weight: 600;
                border: none;
                background-color: #CD5700;
                cursor: pointer;
                color: white
            }

                .stats-dropdown select option {
                    background-color: whitesmoke;
                    cursor: pointer;
                    color: black;
                }

        .stats-head-row p {
            font-size: 12px;
            margin: 7px 0
        }

        .stats-title-row {
            padding: 15px
        }

            .stats-title-row p {
                font-size: 12px
            }

        .stats-diag-row {
            padding: 7px 15px
        }

        .stats-cnt {
            column-gap: 15px
        }

            .stats-cnt div {
                width: 15px;
                height: 15px
            }

            .stats-cnt p {
                font-size: 12px;
                margin: 7px 0
            }

        .stats-diag {
            height: 60px;
            width: 120px;
        }

            .stats-ok img {
                height: 30px;
                margin: 0 0 0 15px
            }

            .stats-ok button {
                padding: 7px 20px;
                margin: 7px 20px 7px 0
            }
    }
</style>

<div style="display: @(isVisible ? "flex" : "none")" class="stats-popup">
    <div class="stats-head-row">
        <p>Статистика</p>
        <img @onclick="(() => { if (!isImportVisible) Close(); })" src="images/close.png" class="stats-close" />
    </div>
    <div class="stats-button-row">
        <button @onclick="PickYear" disabled="@isImportVisible" class=@(isYearPicked ? " selected" : "")>@DateTime.Now.Year</button>
        <button @onclick="PickMonth" disabled="@isImportVisible" class=@(isMonthPicked ? "selected" : "")>@DateTime.Now.ToString("MMMM", Culture.culture)</button>
        <button @onclick="PickWeek" disabled="@isImportVisible" class=@(isWeekPicked ? "selected" : "")>@mon.ToString("dd.MM") - @sun.ToString("dd.MM")</button>
    </div>
    <div class="stats-dropdown">
        <select @onchange="HandleSelect">
            <option disabled="@isImportVisible" value="week">@mon.ToString("dd.MM") - @sun.ToString("dd.MM")</option>
            <option disabled="@isImportVisible" value="month">@DateTime.Now.ToString("MMMM", Culture.culture)</option>
            <option disabled="@isImportVisible" value="year">@DateTime.Now.Year</option>
        </select>
    </div>
    <div class="stats-title-row">
        <p>Осуществлено выездов: 17</p>
    </div>
    <div class="stats-diag-row">
        <div class="stats-column">
            <div class="stats-cnt">
                <div style="background-color: green;"></div>
                <p>Выполнено: @ChartService.instset[0]</p>
            </div>
            <div class="stats-cnt">
                <div style="background-color: yellow;"></div>
                <p>Ожидают: @ChartService.instset[1]</p>
            </div>
            <div class="stats-cnt">
                <div style="background-color: red"></div>
                <p>Передано другим сотрудникам: @ChartService.instset[2]</p>
            </div>
        </div>
        <div class="stats-diag">
            <Chart Config="ChartService.InstData" />
        </div>
    </div>
    <div class="stats-title-row">
        <p>Характер проблем</p>
    </div>
    <div class="stats-diag-row">
        <div class="stats-column">
            <div class="stats-cnt">
                <div style="background-color: blue;"></div>
                <p>Нестабильное соединение: @ChartService.genset[0]</p>
            </div>
            <div class="stats-cnt">
                <div style="background-color: brown"></div>
                <p>Нет сигнала ТВ: @ChartService.genset[1]</p>
            </div>
            <div class="stats-cnt">
                <div style="background-color: olive"></div>
                <p>Неполадки с мобильной связью: @ChartService.genset[2]</p>
            </div>
            <div class="stats-cnt">
                <div style="background-color: orange"></div>
                <p>Аппаратные проблемы: @ChartService.genset[3]</p>
            </div>
        </div>
        <div class="stats-diag">
            <Chart Config="ChartService.GeneralData" />
        </div>
    </div>
    <div class="stats-ok">
        <img @onclick="OpenImport" src="images/excel.png" />
        <button @onclick="(() => { if (!isImportVisible) Close(); })">Ок</button>
    </div>
</div>

<Import isVisible="isImportVisible" isVisibleChanged="ImportVisibility" />

@code {
    [Parameter] public bool isVisible { get; set; }
    [Parameter] public EventCallback isVisibleChanged { get; set; }
    [Parameter] public List<Request> userRequests { get; set; }
    [Parameter] public List<Report> userReports { get; set; }
    DateTime mon, sun;
    private bool isYearPicked = false, isMonthPicked = false, isWeekPicked = true;
    private bool isImportVisible = false;

    protected override void OnInitialized()
    {
        mon = DateTime.Today.AddDays(-((int)DateTime.Today.DayOfWeek - (int)DayOfWeek.Monday));
        sun = mon.AddDays(6);
        ChartService.userRequests = userRequests.Where(u => u.Scheduled.Date >= mon.Date && u.Scheduled.Date <= mon.AddDays(6).Date).ToList();
        ChartService.userReports = userReports.Where(r => userRequests.Select(rq => rq.RequestID).Contains(r.RequestID)).ToList();
        GetStats();
    }

    private void GetStats()
    {
        ChartService.DrawTopChart();
        ChartService.DrawBottomChart();
    }

    private void PickYear()
    {
        isYearPicked = true;
        isWeekPicked = false; isMonthPicked = false;
        ChartService.userRequests = userRequests.Where(u => u.Scheduled.Year == DateTime.Now.Year).ToList();
        ChartService.userReports = userReports.Where(r => userRequests.Select(rq => rq.RequestID).Contains(r.RequestID)).ToList();
        GetStats();
    }

    private void PickMonth()
    {
        isMonthPicked = true;
        isWeekPicked = false; isYearPicked = false;
        ChartService.userRequests = userRequests.Where(u => u.Scheduled.Month == DateTime.Now.Month && u.Scheduled.Year == DateTime.Now.Year).ToList();
        ChartService.userReports = userReports.Where(r => userRequests.Select(rq => rq.RequestID).Contains(r.RequestID)).ToList();
        GetStats();
    }

    private void PickWeek()
    {
        isWeekPicked = true;
        isMonthPicked = false; isYearPicked = false;
        ChartService.userRequests = userRequests.Where(u => u.Scheduled.Date >= mon.Date && u.Scheduled.Date <= mon.AddDays(6).Date).ToList();
        ChartService.userReports = userReports.Where(r => userRequests.Select(rq => rq.RequestID).Contains(r.RequestID)).ToList();
        GetStats();
    }

    private void HandleSelect(ChangeEventArgs e)
    {
        string selectedOption = e.Value?.ToString();
        switch(selectedOption)
        {
            case "week":
                PickWeek();
                break;
            case "month":
                PickMonth();
                break;
            case "year":
                PickYear();
                break;
        }
    }

    private void OpenImport() => isImportVisible = true;
    private void ImportVisibility() => isImportVisible = false;

    private void Close() => isVisibleChanged.InvokeAsync();
}
