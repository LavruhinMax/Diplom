@page "/lead/{Transfer?}"
@inject LeadPage_VM ViewModel

<link href="css/lead.css" rel="stylesheet" />
<PageTitle>Главная</PageTitle>

<Header />
<div class="main">
    <div class="grid">
        <div class="head">
            <div class="left-cnt">
                <p>Добрый день, @UserContext.name</p>
                <div class="button-cnt">
                    <button class="button-left" @onclick="Add">Добавить нового сотрудника</button>
                    <button class="button-right" @onclick="OpenArchive">Архив</button>
                </div>
            </div>
            <div class="right-cnt">
                <p class="month">@ViewModel.date.ToString("MMMM", Culture.culture)</p>
                <p class="day">@ViewModel.date.Day</p>
            </div>
        </div>
        <div style="justify-content: @(ViewModel.filteredInstallators.Count == 0 ? "center" : "flex-start")" class="list">
            <input placeholder="Поиск" @oninput="FilterChanged" />
            @if (ViewModel.filteredInstallators.Count() == 0)
            {
                <img src="images/no results.png" />
                <p>Ничего не найдено</p>
            }
            @foreach (var i in ViewModel.filteredInstallators)
            {
                <div class="list-row" @onclick="() => Select(i.InstallatorID)">
                    <p>@i.LastName @i.FirstName @i.MiddleName</p>
                    @if (@ViewModel.requests.Where(r => r.InstallatorID == i.InstallatorID).LastOrDefault() != null)
                    {
                    <div class="last">
                        <div></div>
                        <p>Последний вызов: @ViewModel.requests.Where(r => r.InstallatorID == i.InstallatorID).Last().Scheduled.ToString("dd MMM, HH:mm", Culture.culture)</p>
                    </div>
                    }
                </div>
            }
        </div>
        <div class="window">
            <p style="color: dimgray">Сегодня:</p>
            <div class="window-row">
                <img src="images/done.png" />
                <p>Завершено: @ViewModel.requests.Where(r => r.Closed != null).Count()/@ViewModel.requests.Count()</p>
            </div>
            <div class="window-row">
                <img src="images/time.webp" />
                <p>Ожидают: @ViewModel.requests.Where(r => r.Closed == null).Count()/@ViewModel.requests.Count()</p>
            </div>
            <div class="window-row">
                <img src="images/trouble.webp" />
                <p>Отложено: @ViewModel.requests.Where(r => r.isDelayed == 1).Count()/@ViewModel.requests.Count()</p>
            </div>
        </div>
    </div>
</div>
<Footer />

<Add isVisible="isAddingVisible" isVisibleChanged="AddVisibility" isAddingOrEditing="true" AddInst="AddInst" />
<Archive isVisible="isArchiveVisible" isVisibleChanged="ArchiveVisibility" recoverInst="Recover" deleteInst="Delete" installators="ViewModel.GetArchived()" />
<Ok isVisible="isOkVisible" isVisibleChanged="OkVisibility" message="@message" />

@code {
    [Parameter] public string? Transfer { get; set; }
    private bool isAddingVisible = false;
    private bool isArchiveVisible = false;
    private bool isOkVisible = false;
    public string message = string.Empty;
    public string searchOption = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeAsync();
        if (!string.IsNullOrEmpty(Transfer))
        {
            message = Transfer;
            isOkVisible = true;
        }
    }

    private void Select(int id)
    {
        NavManager.NavigateTo($"unit/{id}");
    }

    private void OpenArchive() => isArchiveVisible = true;

    private void FilterChanged(ChangeEventArgs e)
    {
        searchOption = e.Value.ToString();
        ViewModel.Search(searchOption);
    }

    private async Task Recover(Installator inst)
    {
        await ViewModel.Recover(inst);
        message = $"{inst.LastName} {inst.FirstName[0]}.{inst.MiddleName[0]}. восстановлен";
        if (inst.Gender == "Ж") message += "а";
        message += ".";
        isOkVisible = true;
    }

    private async Task Delete(Installator inst)
    {
        await ViewModel.Delete(inst);
        message = $"{inst.LastName} {inst.FirstName[0]}.{inst.MiddleName[0]}. удален";
        if (inst.Gender == "Ж") message += "а";
        message += ".";
        isOkVisible = true;
    }

    private void Add() => isAddingVisible = true;

    private async Task AddInst(Installator inst) => await ViewModel.AddInst(inst);

    private void AddVisibility() => isAddingVisible = false;
    private void ArchiveVisibility() => isArchiveVisible = false;
    private void OkVisibility() => isOkVisible = false;
}