@page "/unit/{InstallatorID:int}"
@inject Unit_VM ViewModel

<link href="css/emp.css" rel="stylesheet" />
<PageTitle>@ViewModel.inst.LastName @ViewModel.inst.FirstName</PageTitle>

<Header />
<div class="main">
    <div class="grid">
        <div class="head">
            <div class="left-cnt">
                <p>@ViewModel.inst.LastName @ViewModel.inst.FirstName @ViewModel.inst.MiddleName</p>
                <p>@ViewModel.phone | @ViewModel.inst.Email </p>
            </div>
            <div class="middle-cnt">
                <button class="edit" @onclick="Edit">Изменить данные</button>
                <button class="delete" @onclick="OpenDelete">Удалить</button>
            </div>
            <div class="right-cnt">
                <img src="images/income.png" />
                <img src="images/stats.webp" />
            </div>
        </div>
        <div class="day">
            <img src="images/arrow-left.png" @onclick="ViewModel.RemoveDay" />
            <div class="today">
                <p class="num">@ViewModel.date.Day</p>
                <p class="month">@ViewModel.date.ToString("MMM", Culture.culture)</p>
            </div>
            <img src="images/arrow-right.png" @onclick="ViewModel.AddDay" />
        </div>
        <div class="list">
            <p class="title">Назначено на @ViewModel.date.ToString("dd MMMM", Culture.culture):</p>
            @foreach (var r in ViewModel.filteredRequests)
            {
                @if (ViewModel.abonentsDict.TryGetValue(r.AbonentID, out var a) && r.InstallatorID == ViewModel.inst.InstallatorID)
                {
                    <div class="card">
                        <div class="card-row">
                            <img src="images/time.webp" />
                            <p>@r.Scheduled.ToString("HH:mm", Culture.culture)</p>
                        </div>
                        <div class="card-row">
                            <img src="images/location.png" />
                            <p>@a.City, @a.Street @a.House</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>
<Footer />

<Add isVisible="isEditingVisible" isVisibleChanged="EditVisibility" isAddingOrEditing="false" EditInst="EditInst" i="ViewModel.inst" />
<Confirm isVisible="isConfirmVisible" isVisibleChanged="ConfirmVisibility" message="@message" isConfirmed="Delete" />

@code {
    [Parameter] public int InstallatorID { get; set; }
    private bool isEditingVisible = false;
    private bool isConfirmVisible = false;
    private bool isOkVisible = false;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeAsync(InstallatorID);
    }

    private void Edit() => isEditingVisible = true;
    private async Task EditInst(Installator inst) => await ViewModel.EditInst(inst);


    private void OpenDelete()
    {
        message = $"{ViewModel.inst.LastName} {ViewModel.inst.FirstName[0]}.{ViewModel.inst.MiddleName[0]}. будет перемещен";
        if (ViewModel.inst.Gender == "Ж") message += "а";
        message += " в архив. Продолжить?";
        isConfirmVisible = true;
    }

    private async Task Delete(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await ViewModel.DeleteInst();
            string transfer = $"{ViewModel.inst.LastName} {ViewModel.inst.FirstName[0]}.{ViewModel.inst.MiddleName[0]}. перемещен";
            if (ViewModel.inst.Gender == "Ж") transfer += "а";
            transfer += " в архив.";
            NavManager.NavigateTo($"lead/{transfer}");
        }
    }

    private void ConfirmVisibility() => isConfirmVisible = false;
    private void EditVisibility() => isEditingVisible = false;
    private void OkVisibility() => isOkVisible = false;
}
